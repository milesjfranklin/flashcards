var javascript_interactive = "<p id='front-side' onclick='myFunction()'>How Does JavaScript make web pages more interactive?</p> <p id='back-side' onclick='myFunction_2()'>Access Content: You can utilize JavaScript to select any element, attribute, or text from an HTML page<br><br>Modify Content: JavaScript can add elements, attributes, and text to a page or remove them<br><br>Program Rules: You can specify a set of steps for the browser to follow (like a recipe) which allows it to access or change the contentÂ of the page<br><br>React to events: You can specify that a script should run when a specific event has occurred such as a button being pressed</p>";

var javascript_purpose = "<p id='front-side' onclick='myFunction()'>What Does JavaScript Do?</p> <p id='back-side' onclick='myFunction_2()'>JavaScript allows you to make web pages more interactive by accessing and modifying the content and markup used in a web page while it is being viewed in a browser</p>";

var vocabulary_syntax = "<p id='front-side' onclick='myFunction()'>Explain Vocabulary and Syntax in terms of programming </p> <p id='back-side' onclick='myFunction_2()'>Vocabulary: The words the computers or program understands. Syntax: How you put those words (vocabulary) together to create instructions a computer can follow.</p>";

var flowchart = "<p id='front-side' onclick='myFunction()'>What is a flowchart?</p> <p id='back-side' onclick='myFunction_2()'>1) a diagram of the sequence of movements or actions of people or things involved in a complex system or activity; 2) a graphical representation of a computer program in relation to its sequence of functions (as distinct from the data it processes).</p>";

var what_is_a_script = "<p id='front-side' onclick='myFunction()'>What is a script?</p> <p id='back-side' onclick='myFunction_2()'>A script is a series of instructions that the computer can follow in order to achieve a goal.</p>";

var javascript_objects = "<p id='front-side' onclick='myFunction()'>What are objects?</p> <p id='back-side' onclick='myFunction_2()'>The model uses objects to represent physical things. Objects can have: properties that tell us about the object; methods that perform tasks using the properties of that object; events which are triggered when a user interacts with the computer.</p>";

var javascript_properties = "<p id='front-side' onclick='myFunction()'>What are properties?</p> <p id='back-side' onclick='myFunction_2()'>Properties are the values associated with a JavaScript object. A JavaScript object is a collection of unordered properties. Properties can usually be changed, added, and deleted, but some are read only. Lastly, each property has a name and a value and each of these name/value pairs tells you something about each individual instance of the object.</p>";

var javascript_events = "<p id='front-side' onclick='myFunction()'>What are events?</p> <p id='back-side' onclick='myFunction_2()'>HTML events are 'things' that happen to HTML elements. When JavaScript is used in HTML pages, JavaScript can 'react' on these events. Additionally, JavaScript lets you execute code when events are detected (such as the HTML page fully loading). </p>";

var javascript_methods = "<p id='front-side' onclick='myFunction()'>What are methods?</p> <p id='back-side' onclick='myFunction_2()'>Methods represent the things people need to do with objects. Methods can retrieve or update the values of an object's properties. Additionally, JavaScript methods are actions that can be performed on objects. A JavaScript method is a property containing a function definition.</p>";

var document_object = "<p id='front-side' onclick='myFunction()'>What are the document object?</p> <p id='back-side' onclick='myFunction_2()'>When an HTML document is loaded into a web browser, it becomes a document object. The document object is the root node of the HTML document. The document object represents your web page. Lastly, by using the document object, you can access and change what content users see on a web page.</p>";

var window_object = "<p id='front-side' onclick='myFunction()'>What are window objects?</p> <p id='back-side' onclick='myFunction_2()'>The window object represents an open window in a browser. If a document contain frames (<iframe> tags), the browser creates one window object for the HTML document, and one additional window object for each frame.</p>";

var javascript_DOM = "<p id='front-side' onclick='myFunction()'>What is the DOM?</p> <p id='back-side' onclick='myFunction_2()'>The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document.</p>";

var javascript_HTML_DOM = "<p id='front-side' onclick='myFunction()'>What is the HTML DOM?</p> <p id='back-side' onclick='myFunction_2()'>The HTML DOM is a standard object model and programming interface for HTML. It defines: 1) The HTML elements as objects 2) The properties of all HTML elements 3) The methods to access all HTML elements 4) The events for all HTML elements. In other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.</p>";

var browser_web_page = "<p id='front-side' onclick='myFunction()'>How does a browser see a web page?</p> <p id='back-side' onclick='myFunction_2()'>A browser interprets the HTML code on a web page then applies styling to it. 1) The browser receives the page as HTML code 2) The browser creates a model of the page and stores this model in its memory 3) Lastly, the browser uses a rendering engine to show the page on the screen. When the browser receives CSS rules, the rendering engine processes them and applies each rule to its corresponding elements. This is how the browser positions the elements in the correct place, with the right colors, fonts, and so on.</p>";

var browser_interpreter = "<p id='front-side' onclick='myFunction()'>What is a browser interpreter?</p> <p id='back-side' onclick='myFunction_2()'>All major browsers use a JavaScript interpreter to translate your instructions (in JavaScript) into instructions the computer can follow. This interpreter (or scripting language) takes your JavaScript and translates them into instructions the browser can use to achieve the tasks you want it to perform. In an interpreted programming language, like JavaScript, each line of code is translated one-by-one as the script is run.</p>";

var html_content = "<p id='front-side' onclick='myFunction()'>Explain HTML as the Content Layer</p> <p id='back-side' onclick='myFunction_2()'>HTML is where the content of the page lives. The HTML gives the page structure and adds semantics</p>";

var css_presentation = "<p id='front-side' onclick='myFunction()'>Explain CSS as the Presentation Layer</p> <p id='back-side' onclick='myFunction_2()'>The CSS enhances the HTML page with rules that state how the HTML content is presented (backgrounds, borders, box dimensions, colors, fonts, etc.)</p>";

var javascript_behavior = "<p id='front-side' onclick='myFunction()'>Explain JavaScript as the Behavior Layer</p> <p id='back-side' onclick='myFunction_2()'>JavaScript is where we change how a page behaves by adding interactivity. Always aim to keep as much of your JavaScript in a separate file as possible.</p>";

var javascript_separate = "<p id='front-side' onclick='myFunction()'>Why should you keep JavaScript code in a separate file?</p> <p id='back-side' onclick='myFunction_2()'>Keeping you JavaScript in a separate file means that the page will still work if the user cannot load or doesn't want to run the JavaScript. Additionally, you can also reuse the JavaScript code and file on several pages which makes load speeds faster and makes the site easier to maintain.</p>";

var javascript_prop_acc = "<p id='front-side' onclick='myFunction()'>What are Property Accessors?</p> <p id='back-side' onclick='myFunction_2()'>Property accessors provide access to an object's properties by using the dot notation or the bracket notation. One can think of an object as an associative array (a.k.a. map, dictionary, hash, lookup table). The keys in this array are the names of the object's properties. It's typical when speaking of an object's properties to make a distinction between properties and methods. However, the property/method distinction is little more than a convention. A method is simply a property that can be called, for example if it has a reference to a Function instance as its value. There are two ways to access properties: dot notation and bracket notation. <br><br>Ex: console.log(person.firstname); and console.log(person['lastname']); </p>";

var javascript_obj_prop = "<p id='front-side' onclick='myFunction()'>Describe JavaScript Object Properties</p> <p id='back-side' onclick='myFunction_2()'>Properties are the most important part of any JavaScript object. Properties are the values associated with a JavaScript object. A JavaScript object is a collection of unordered properties. Properties can usually be changed, added, and deleted, but some are read only. All properties have a name. In addition they also have a value. The value is one of the property's attributes. Other attributes are: enumerable, figurable, and writable. These attributes define how the property can be accessed (is it readable?, is it writable?). In JavaScript, all attributes can be read, but only the value attribute can be changed (and only if the property is writable).</p>";

var javascript_func_parameters = "<p id='front-side' onclick='myFunction()'>JavaScript Function Parameters</p> <p id='back-side' onclick='myFunction_2()'>functionName(parameter1, parameter2, parameter3) {<br>  // code to be executed<br>}<br><br> Function parameters are the names listed in the function definition. Function arguments are the real values passed to (and received by) the function. JavaScript function definitions do not specify data types for parameters. JavaScript functions do not perform type checking on the passed arguments. JavaScript functions do not check the number of arguments received.</p>";

var javascript_arg_vs_para = "<p id='front-side' onclick='myFunction()'>What are the differences between parameters and arguments?</p> <p id='back-side' onclick='myFunction_2()'>The terms parameter and argument are often used interchangeably, because the context usually makes it clear what the intended meaning is. The following is a rule of thumb for distinguishing them. <br>Parameters are used to define a function. They are also called formal parameters and formal arguments. In the following example, param1 and param2 are parameters: <br> function foo(param1, param2) {<br>    ...<br>}<br>Arguments are used to invoke a function. They are also called actual parameters and actual arguments. In the following example, 3 and 7 are arguments:<br>foo(3, 7);</p>";

var javascript_statements = "<p id='front-side' onclick='myFunction()'>What are JavaScript Statements?</p> <p id='back-side' onclick='myFunction_2()'>A script is a series of instructions that a computer can follow one-by-one. Each individual instruction or step is known as a statement. Statements should end with a semicolon. JavaScript statements are composed of: Values, Operators, Expressions, Keywords, and Comments.</p>";

var javascript_code_block = "<p id='front-side' onclick='myFunction()'>What are JavaScript Code Blocks?</p> <p id='back-side' onclick='myFunction_2()'>A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets. The curly brace is not followed by a semicolon.</p>";

var javascript_comment = "<p id='front-side' onclick='myFunction()'>JavaScript Comments </p> <p id='back-side' onclick='myFunction_2()'>JavaScript comments can be used to explain JavaScript code, and to make it more readable. JavaScript comments can also be used to prevent execution, when testing alternative code. Multi-line comments come in the form of /* and */. Single line comments come in the form of //. Good comments can provide information about your code or allow you to block out sections of code for testing purposes.</p>";

var javascript_variable = "<p id='front-side' onclick='myFunction()'>What is a JavaScript variable?</p> <p id='back-side' onclick='myFunction_2()'>JavaScript variables are containers for storing data values. Before you use a variable in a JavaScript program, you must declare it. Variables are declared with the var keyword as follows: <br><br>var x = 5; var y = 6; var z = x + y;<br><br>You should not use any of the JavaScript reserved keywords as a variable name. These keywords are mentioned in the next section. For example, break or boolean variable names are not valid. <br>JavaScript variable names should not start with a numeral (0-9). They must begin with a letter or an underscore character. For example, 123test is an invalid variable name but _123test is a valid one. <br> JavaScript variable names are case-sensitive. For example, Name and name are two different variables.</p>";

var javascript_identifier = "<p id='front-side' onclick='myFunction()'>What is a JavaScript Identifier?</p> <p id='back-side' onclick='myFunction_2()'>All JavaScript variables must be identified with unique names. These unique names are called identifiers. Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume). The general rules for constructing names for variables (unique identifiers) are: <br>Names can contain letters, digits, underscores, and dollar signs. <br>Names must begin with a letter <br>Names can also begin with $ and _ (but we will not use it in this tutorial) <br> Names are case sensitive (y and Y are different variables) <br> Reserved words (like JavaScript keywords) cannot be used as names</p>";

var javascript_keyword = "<p id='front-side' onclick='myFunction()'>What is a keyword?</p> <p id='back-side' onclick='myFunction_2()'>In programming, a keyword is a word that is reserved by a program because the word has a special meaning. Keywords can be commands or parameters. Every programming language has a set of keywords that cannot be used as variable names. Keywords are sometimes called reserved names.</p>";

var javascript_naming_conventions = "<p id='front-side' onclick='myFunction()'>Explain JavaScript Naming Conventions</p> <p id='back-side' onclick='myFunction_2()'>Variable and function names written as camelCase. Global variables written in UPPERCASE (We don't, but it's quite common). Constants (like PI) written in UPPERCASE.p Hyphens can be mistaken as subtraction attempts. Hyphens are not allowed in JavaScript names; used underscores instead. Many programmers prefer to use underscores (date_of_birth), especially in SQL databases. Underscores are often used in PHP documentation. Do not start names with a $ sign. It will put you in conflict with many JavaScript library names.</p>";

var data_types = "<p id='front-side' onclick='myFunction()'>What are the JavaScript Data Types</p> <p id='back-side' onclick='myFunction_2()'>number for numbers of any kind: integer or floating-point.<br><br> string for strings. A string may have one or more characters, there's no separate single-character type.<br><br>boolean for true/false.<br><br>null for unknown values â a standalone type that has a single value null.<br><br>undefined for unassigned values â a standalone type that has a single value undefined.<br><br>object for more complex data structures.<br><br>symbol for unique identifiers.<br><br>The typeof operator allows us to see which type is stored in the variable.</p>";

var escaping = "<p id='front-side' onclick='myFunction()'>What does it mean to 'escape the quotation characters'?</p> <p id='back-side' onclick='myFunction_2()'>The solution to avoid this problem, is to use the backslash escape character. The backslash (\\) escape character turns special characters into string characters. Example: var x = 'We are the so-called \"Vikings\" from the north.';</p>";

var javascript_getelementbyid = "<p id='front-side' onclick='myFunction()'>Explain the getElementById() method</p> <p id='back-side' onclick='myFunction_2()'>The getElementById() method returns the element that has the ID attribute with the specified value. This method is one of the most common methods in the HTML DOM, and is used almost every time you want to manipulate, or get info from, an element on your document. Returns null if no elements with the specified ID exists. An ID should be unique within a page. However, if more than one element with the specified ID exists, the getElementById() method returns the first element in the source code. <br><br> document.getElementById('demo');</p>";

var how_to_declare_a_variable = "<p id='front-side' onclick='myFunction()'>What are the shorthand ways to declare a variable?</p> <p id='back-side' onclick='myFunction_2()'> 1) var price = 5; <br> var quantity = 14; <br> var total = price * quantity; <br><br> 2) var price, quantity, total; <br> price = 5; <br> quantity = 14; <br> total = price * quantity; <br><br> 3) var price = 5, quantity = 14; <br> var total = price * quantity;</p>";

var javascript_array = "<p id='front-side' onclick='myFunction()'>What is a JavaScript array?</p> <p id='back-side' onclick='myFunction_2()'>JavaScript arrays are used to store multiple values in a single variable. <br>Ex: var cars = ['Saab', 'Volvo', 'BMW']; <br> Spaces and line breaks are not important. A declaration can span multiple lines: <br>var cars = [ <br>  'Saab,<br>  'Volvo',<br>  'BMW'<br>]; <br><br>The following example also creates an Array, and assigns values to it: <br> var cars = new Array('Saab', 'Volvo', 'BMW');<br> Don't use new Array() to create an array</p>";

var numbering_array = "<p id='front-side' onclick='myFunction()'>Numbering items in an array</p> <p id='back-side' onclick='myFunction_2()'>Each item in an array is automatically given a number called an index. This index can be used to access specific items in the array. Consider the following array which holds three colors: < br>var colors;<br>colors = ['white', 'black', 'custom'];<br> Note that the index starts at [0] and not [1]<br>So, the array with the corresponding index values would be<br><br> [0] = 'white'<br>[1] = 'black' <br> [2] = 'custom'</p>";

var accessing_array = "<p id='front-side' onclick='myFunction()'>How to access an item in an array</p> <p id='back-side' onclick='myFunction_2()'>To retrieve the third item in an array list, the array name is specifiedÂ along with the index number in square brackets. ex: [0]<br>Here, you can see a variable called itemThreeÂ is declared. Its value is set to be the third color from the colors array. <br><br>var itemThree;<br>itemThree = colors[2];</p>";

var number_items_in_array = "<p id='front-side' onclick='myFunction()'>Number of items in an Array aka the length keyword</p> <p id='back-side' onclick='myFunction_2()'>The length property sets or returns the number of elements in an array. <br><br>var fruits = ['Banana', 'Orange', 'Apple', 'Mango']; <br>fruits.length;<br>returns 4<br>Return the length of an array: array.length <br>Set the length of an array: array.length = number</p>";

var javascript_expressions = "<p id='front-side' onclick='myFunction()'>What are JavaScript expressions?</p> <p id='back-side' onclick='myFunction_2()'>An expression is any valid set of literals, variables, operators, and expressions that evaluates to a single value. The value may be a number, a string, or a logical value. Conceptually, there are two types of expressions: those that assign a value to a variable, and those that simply have a value. For example, the expression<br><br>x = 7<br><br> is an expression that assigns x the value 7. This expression itself evaluates to 7. Such expressions use assignment operators. On the other hand, the expression<br><br>3 + 4<br><br>simply evaluates to 7; it does not perform an assignment. The operators used in such expressions are referred to simply as operators.</p>";

var statements_expressions = "<p id='front-side' onclick='myFunction()'>Expressions versus statements in JavaScript</p> <p id='back-side' onclick='myFunction_2()'>An expression evaluates to a value. A statement does something. Statements represent an action or command e.g print statements, assignment statements. Expression is a combination of variables, operations and values that yields a result value.<br><br>JavaScript distinguishes expressions and statements. An expression produces a value and can be written wherever a value is expected, for example as an argument in a function call. Each of the following lines contains an expression:<br><br>myvar<br>3 + x<br>myfunc('a', 'b')<br><br>Roughly, a statement performs an action. Loops and if statements are examples of statements. A program is basically a sequence of statements (we're ignoring declarations here). Wherever JavaScript expects a statement, you can also write an expression. Such a statement is called an expression statement. The reverse does not hold: you cannot write a statement where JavaScript expects an expression. For example, an if statement cannot become the argument of a function.</p>";

var javascript_operator = "<p id='front-side' onclick='myFunction()'>Describe JavaScript Operators</p> <p id='back-side' onclick='myFunction_2()'>JavaScript operators are used to assign values, compare values, perform arithmetic operations, and more.<br><br>Assignment operators<br>Assign a value to a variable<br> color = 'beige';<br>The value of the color is now beige<br><br>Arithmetic operator <br>perform basic math <br>area = 3 * 2 <br> The value of the area is now 6 <br><br> String Operator <br> Combine two strings <br> greeting = 'Hi' + 'Molly'; <br>The value of greeting is now Hi Molly.<br><br> Comparison Operators <br> Compare two values and return true or false <br> buy = 3 > 5; <br> The value of buy is false<br><br> Logical Operators <br> Combine expressions and return true or false <br> buy = (5 > 3) && (2 < 4); <br>The value of buy is now true</p>";

var javascript_operators_add = "<p id='front-side' onclick='myFunction()'>JavaScript Operators: Addition </p> <p id='back-side' onclick='myFunction_2()'>Arithmetic operators are used to perform arithmetic between variables and/or values. Addition adds one value to another. Given that y = 5: <br><br>x = y + 2 | y = 5 | x = 7</p>"; 

var javascript_operators_sub = "<p id='front-side' onclick='myFunction()'>JavaScript Operators: Subtraction </p> <p id='back-side' onclick='myFunction_2()'>Arithmetic operators are used to perform arithmetic between variables and/or values. Subtraction subtracts one value from another. Given that y = 5:<br><br> x = y - 2 | y = 5 | x = 3</p>";

var javascript_operators_multi = "<p id='front-side' onclick='myFunction()'>JavaScript Operators: Multiplication </p> <p id='back-side' onclick='myFunction_2()'>Arithmetic operators are used to perform arithmetic between variables and/or values. Multiplies two values using an asterick. Given that y = 5:<br><br> x = y * 2 | y = 5 | x = 10</p>";

var javascript_operators_div = "<p id='front-side' onclick='myFunction()'>JavaScript Operators: Division </p> <p id='back-side' onclick='myFunction_2()'>Arithmetic operators are used to perform arithmetic between variables and/or values. Divides two values. Given that y = 5:<br><br> x = y / 2 | y = 5 | x = 2.5</p>";

var javascript_operators_incre = "<p id='front-side' onclick='myFunction()'>JavaScript Operators: Increment </p> <p id='back-side' onclick='myFunction_2()'>Arithmetic operators are used to perform arithmetic between variables and/or values. Adds one value to the current number. Given that y = 5:<br><br> x = ++y | y = 6 | x = 6 <br> x = y++ | y = 6 | x = 5</p>";

var javascript_operators_decre = "<p id='front-side' onclick='myFunction()'>JavaScript Operators: Decrement </p> <p id='back-side' onclick='myFunction_2()'>Arithmetic operators are used to perform arithmetic between variables and/or values. Subtrcts one from the current number. Given that y = 5:<br><br> x = --y | y = 4 | x = 4<br>x = y-- | y = 4 | x = 5</p>";

var javascript_operators_mod = "<p id='front-side' onclick='myFunction()'>JavaScript Operators: Modulus </p> <p id='back-side' onclick='myFunction_2()'>Arithmetic operators are used to perform arithmetic between variables and/or values. Divides two values and returns the remainder. Given that y = 5:<br><br> x = y % 2 | y = 5 | x = 1 </p>";

var javascript_textContent = "<p id='front-side' onclick='myFunction()'>HTML DOM textContent Property </p> <p id='back-side' onclick='myFunction_2()'>The textContent property sets or returns the text content of the specified node, and all its descendants. <br> If you set the textContent property, any child nodes are removed and replaced by a single Text node containing the specified string.<br> Note: This property is similar to the innerText property, however there are some differences:<br> textContent returns the text content of all elements, while innerText returns the content of all elements, except for <script> and <style> elements.<br> innerText will not return the text of elements that are hidden with CSS (textContent will). <br> Tip: Sometimes this property can be used instead of the nodeValue property, but remember that this property returns the text of all child nodes as well.<br> Tip: To set or return the HTML content of an element, use the innerHTML property. <br><br>Get the text content of an element: <br><br> var x = document.getElementById('myBtn').textContent; </p>";

var string_operator = "<p id='front-side' onclick='myFunction()'>String Operator </p> <p id='back-side' onclick='myFunction_2()'>There is just one string operator: the + symbol. It is used to join the strings on either side of it. <br> Programmers call the process of joining two or more strings to create a new string concatenation. <br><br> var firstName = 'Ivy ';<br> var lastName = 'Stone'; <br> var fullName = firstName + lastName;</p>";

var string_number = "<p id='front-side' onclick='myFunction()'>Mixing numbers and strings together </p> <p id='back-side' onclick='myFunction_2()'>When you place quotes around a number, it is a string (not a numeric data type), and you cannot perform addition operations on strings<br>var cost1 = '7';<br>var cost2 = '9';<br>var total = cost1 + cost2;<br> You would end up with '79' (which is a string, not a number)<br><br>If you try to add a numeric data type to a string, then the number becomes part of the string, e.g., adding a house number to a street name: <br>var number = 12; <br>var street = 'Ivy Road';<br> var add = number + street; <br>You would end up with string saying '12Ivy Road'.<br><br> If you try to use any of the other arithmetic operators on a string, then the value that results is usually a value called NaN. This means 'not a number.' <br> var score = 'seven' <br> var score2 = 'nine'; <br> var total = score * score2;<br> You would end up with the value NaN.</p>";

var functions_methods_objects = "<p id='front-side' onclick='myFunction()'>Explain functions, methods, objects, and built-in objects </p> <p id='back-side' onclick='myFunction_2()'>Functions consist of a series of statements that have been grouped together because they perform a specific task. A method is the same as a function, except methods are created inside (and are part of) an object. <br><br>Objects are used to create models of the world using data. Objects are made up of properties andÂ methods. <br><br>Built-in Objects <br>The browser comes with a set of objects that act as a toolkit for creating interactive web pages.</p>";

var javascript_functions = "<p id='front-side' onclick='myFunction()'>Explain functions</p> <p id='back-side' onclick='myFunction_2()'>Functions let you group a series of statements together to perform a specific task. Statements in a function are not always executed when a page loads, so functions offer a way to store the steps needed to achieve a task. The script can then ask the function to perform all those stepsÂ as and when they are required. For example, you might have a task that you only want to perform if the user clicks on a specific element on a page<br> If you are going to ask the function to perform its task later, then you need to give the function a name. When you ask a function to perform its task, that is known as calling the function. <br> The steps that a function needs to perform its task are packaged in a code block.<br> Some functions need to be providedÂ with information in order to achieve a task. For example, a function to calculate the area of a box will need to know its width and its height. Pieces of information passed to a function are known as parameters. <br> When you write a function and you expect it to provide you with an answer, the response is known as a return value. <br> Lastly, you can have anonymous functions. They do not have to be named, so they cannot be called. Instead, they are executed as soon as the interpreter comes across them.</p>";

var declaring_calling = "<p id='front-side' onclick='myFunction()'>Explain declaring and calling a function</p> <p id='back-side' onclick='myFunction_2()'>To create a function, you give it a name and then write the statements needed to achieve its task inside the curly brackets. This is known as a function declaration. <br> You declareÂ a function using the function keyword. You give the function a name (sometimes called an identifier) followed by parentheses. The statements that perform the task sit in a code block. (They are inside the curly brackets). <br>Having declared a function, you can then execute all the statements that between the curly braces with just one line of code. This is known as calling the function. <br> To run the code in the function, you use the function name followed by theÂ parentheses. <br><br>function sayHello() {<br>document.write('Hello!'); <br>}<br>sayHello(); <br><br>Lastly, the interpreter always looks for variables and function declarations before going through each section of script. This means that a function created with a function declaration can be called before it has even been declared.</p>";

var single_function = "<p id='front-side' onclick='myFunction()'>Reflect on getting a single value out of a function</p> <p id='back-side' onclick='myFunction_2()'>Some functions return information to the code that called them. For example, when they perform a calculation, they return the result. The calculateArea() function returns the area of a rectangle to the code that called it. Inside the function, a variable called area is created. It holds the calculated area of the box. The return keyword is used to return a value to the code that called the function.<br><br> function calculateArea(width, height) {<br>var area = width * height;<br> return area;<br>}<br>var wallOne - calculateArea(3, 5); <br>var wallTwo = calculateArea(8, 5);<br><br>Note that the interpreter leaves the function when return is used. If there was more additional information after the 'return' keyword, then it all would have been overlooked and not processed.<br> </p>";

var multiple_function = "<p id='front-side' onclick='myFunction()'>Reflect on getting multiple values out of a function</p> <p id='back-side' onclick='myFunction_2()'>Functions can return more than one value using an array. For example, this function calculates the area and volume of a box. <br> First, a new function is created called getSize(). The area of the box is calculated and stored in a variable called area. The volume is calculated and stored in a variable called volume. Both are then placed into an array called sizes. The array is then returned to the code that called getSize() function, allowing the values to be used. <br><br>function getSize(width, height, depth) {<br>var area = width * height; <br> var volume = width * height * depth;<br> var sizes = [area, volume];<br>return sizes;<br>}<br>var areaOne = getSize(3, 2, 3)[0];<br>var volumeOne = getSize(3, 2, 3)[1];</p>";

var function_expression = "<p id='front-side' onclick='myFunction()'>Reflect on function expression and anonymous functions</p> <p id='back-side' onclick='myFunction_2()'>If you put a function where the interpreter would expect to see an expression, then it is treated as an expression, and it is known as a function expression. In function expressions, the name is usually omitted. A function with no name is called an anonymous function. Below, the function is stored in a variable called area. It can be called like any function created with a function declaration. <br><br> var area = function(width, height); {<br>return width * height; <br>}<br> var size = area(3, 4);<br><br> In a function expression, the function is not processed until the interpreter gets to that statement. This means you cannot call this function before the interpreter has discovered it. It also means that any code that appears up to that point could potentially alter what goes on inside this function.</p>";

var javascript_iife = "<p id='front-side' onclick='myFunction()'>Immediately invoked function expressions (IIFE)</p> <p id='back-side' onclick='myFunction_2()'>Immediately invoked function expressions (IIFE), pronounced 'iffy', are not given a name. Instead, they are executed as soon as the interpreter comes across them. Below, the variable called area will hold the value returned from the function (rather than storing the function itself so that it can be called later). <br><br>var area = (function() { <br> var width = 3;<br> var height = 2; <br>return width * height; <br> } () );<br><br> The final parentheses after the closing curly bracket of the code block tell the interpreter to call the function immediately. The grouping operators are parentheses there to ensure the interpreter treats this as an expression. <br>Â This way of writing a function is used in several different situations. Often functions are used to ensure that the variable names do not conflict with each other (esp. if the page has more than one script)</p>";

var anonymous_functions = "<p id='front-side' onclick='myFunction()'>When should you use anonymous functions?</p> <p id='back-side' onclick='myFunction_2()'>Immediately invoked function expressions (IIFE) are used for code that only needs to run once with each task, rather than repeatedly called by other parts of the script. For example: <br><br>As an argument when a function is called (to calculate a value for that function).<br><br> To assign the value of a property to an object. <br><br> In event handlers and listeners to perform a task when an event occurs<br><br>To prevent conflicts between two scripts that might use the same variable names<br><br>IIFEs are commonly used as a wrapper around a set of code. Any variables declared within that anonymous function are effectively protected from variables in other scripts that might have the same name.Â </p>";

var local_variable = "<p id='front-side' onclick='myFunction()'>What is a local variable?</p> <p id='back-side' onclick='myFunction_2()'>The location where you declare a variable will affect where it can be used within your code. If you declare a variable within a function, it can only be used within that function. This is known as the variable's scope. <br> When a variable is created inside a function using the var keyword, it can only be used in that function. It is called a local variable or function-level variable. It is said to have local scope or function-level scope. It cannot be assessed outside of the function in which it was declared. Below, area is a local variable. <br><br> function getArea(width, height) {<br> var area = width * height; <br> return area; <br>}<br>var wallSize = getArea(3, 2);<br>document.write(wallSize); <br><br> The interpreter creates local variables when the function is run, and removes them as soon as the function finishes its task.Â </p>";

var global_variable = "<p id='front-side' onclick='myFunction()'>What is a global variable?</p> <p id='back-side' onclick='myFunction_2()'>If you create a variable outside of a function, then it can be used anywhere within the script. It is called a global variable and has global scope. In the example below, wallSize is a global variable. <br><br> function getArea(width, height) {<br> var area = width * height; <br> return area; <br>}<br>var wallSize = getArea(3, 2);<br>document.write(wallSize); <br><br> Global variables are stored in memory for as long as the web page is loaded into the web browser. This means they take up more memory than local variables and it also increases the risk of naming conflicts. For these reasons, utilize local variables as much as possible. <br> If you forgot to declare a variable using the var keyword, the variable will work, but it will be treated as a global variable (this is considered a bad practice.)</p>";

var variable_function = "<p id='front-side' onclick='myFunction()'>What happens to a variable and a function in relationship to an object?</p> <p id='back-side' onclick='myFunction_2()'>In an object, variables become known as properties. Additionally, in a an object, functions become known as methods. Properties tell us about an object, such as the name of a hotel or the number of rooms it has. Each individual hotel might have a different name and a different number of rooms. Futhermore, Methods represent tasks that are associated with the onject. For example, you can check how many rooms are available by subtracting the number of booked rooms from the total number of rooms. </p>";

var name_value_pairings = "<p id='front-side' onclick='myFunction()'>Reflect on common name/value pairs in programming</p> <p id='back-side' onclick='myFunction_2()'>HTML uses attribute names and values while CSS uses property names and values. In JavaScript we have variables which have a name and you can assign them the value of string, number, or Boolean. Arrays have a name and a group of values. (Each item in an array is a name/value pair because it has an index number and a value). Name functions have a name and value that is a set of statements to run if the function is called. Lastly, objects consist of of a set of name/value pairs (but the names are referred to as keys). </p>";

var this_method = "<p id='front-side' onclick='myFunction()'>Discuss the 'this' method</p> <p id='back-side' onclick='myFunction_2()'>The JavaScript this keyword refers to the object it belongs to.<br> It has different values depending on where it is used:<br><br>In a method, this refers to the owner object.<br>Alone, this refers to the global object.<br>In a function, this refers to the global object.<br>In a function, in strict mode, this is undefined.<br>In an event, this refers to the element that received the event.<br>Methods like call(), and apply() can refer this to any object.<br><br>Example:<br>var hotel= { <br><br> name:'Quay',<br>rooms:40, <br>booked: 25; <br><br> checkAvailability: function() { <br>return this.rooms - this.booked; <br>} <br>};</p>";

var dot_bracket_notation = "<p id='front-side' onclick='myFunction()'>What are the two ways to access the properties of an object? Give descriptions.</p> <p id='back-side' onclick='myFunction_2()'>The JavaScript this keyword refers to the object it belongs to.<br> It has different values depending on where it is used:<br><br>In a method, this refers to the owner object.<br>Alone, this refers to the global object.<br>In a function, this refers to the global object.<br>In a function, in strict mode, this is undefined.<br>In an event, this refers to the element that received the event.<br>Methods like call(), and apply() can refer this to any object.<br><br>Example:<br>var hotel= { <br><br> name:'Quay',<br>rooms:40, <br>booked: 25; <br><br> checkAvailability: function() { <br>return this.rooms - this.booked; <br>} <br>};</p>";

var dot_notation = "<p id='front-side' onclick='myFunction()'>Explain dot notation</p> <p id='back-side' onclick='myFunction_2()'>You can access properties or methods by using the dot notation. <br><br> var hotalName = hotel.name;<br>var roomsFree = hotel.checkAvailability();<br><br> To access a property or method of an object you can use the name of the object followed by a period then the name of the property or method you want to access. This is called dot notation. <br><br> You can also use bracket notation:<br> var hotalName = hotel['name'];<br>var roomsFree = hotel['checkAvailability']();<br><br> Lastly, it is possible to update proerties (but not its methods) through dot notation. </p>";

var new_object = "<p id='front-side' onclick='myFunction()'>Explain new Object()</p> <p id='back-side' onclick='myFunction_2()'>new Object() creates a new object in a roundabout way. <br><br>var person = new Object();<br>person.firstName = 'John';<br>person.lastName = 'Doe';<br>person.age = 50;<br>person.eyeColor = 'blue';<br><br> For simplicity, readability and execution speed, use literal notation to create new objects.</p>";

var delete_object = "<p id='front-side' onclick='myFunction()'>Explain how to delete a property with in an object using dot notation</p> <p id='back-side' onclick='myFunction_2()'>To delete a property, use the delete keyword followed by the object name and property value. <br><br>delete hotel.name; <be><be> If you want to just clear the value of a property, you could set it to a blank string. <br><br> hotel.name='';</p>";

var constructor_notation = "<p id='front-side' onclick='myFunction()'>Explain creating many objects with constructor notation</p> <p id='back-side' onclick='myFunction_2()'>Object constructors can use a function as a template for creating objects.<br><br>function Hotel (name, rooms, booked) {<br>this.name = name;<br>this.rooms = rooms;<br>this.booked = booked;<br>this.checkAvailability = function() {<br>return this.rooms - this.booked;<br>};<br>}<br><br>A function called Hotel will be used as a template for creating new objects that represent hotels. Like all functions, it contains statements. In this case, they add properties or methods to the object. The function has three parameters. Each one sets the value of a property in the object. The methods will be the same for each object using the function. <br> You can create instances of the object using the constructor function. The new keyword followed by a call to the function creates a new object. The properties of each object are given as arguments to the function. <br><br>var quayHotel = new Hotel ('Quay', 40, 25); <br> var parkHotel = new Hotel('Park', 120, 77);<br><br>You might ue this technique if your script contains a very complex object that needs to be available but might not be used. The object is defined in the function but it is only created if it is needed.</p>";

var literal_notation = "<p id='front-side' onclick='myFunction()'>Here's an example of literal notation to create an object</p> <p id='back-side' onclick='myFunction_2()'>var hotel = {<br> name: 'Quay',<br>rooms: 40,<br>booked: 25,<br><br>checkAvailability: function() { <br>return this.rooms - this.booked;<br>};</p>";

var global_scope_functions = "<p id='front-side' onclick='myFunction()'>Discuss global functions and scope</p> <p id='back-side' onclick='myFunction_2()'>When a function is created at the top level of a script (that is, not inside another object or function), then it is in the global scope or global context. <br> The default object in this context is the window object, so when this is used inside a function in the global context it refers to the window object. <br> Below, this is being used to return the properties of the window object.<br><br> function windowSize() {<br> var width = this.innerWidth;<br>var height = this.innerHeight;<br>return [height, width];<br>}<br><br> Under the hood, the this keyword is a reference to the object that the function is created inside.</p>";

var global_variables = "<p id='front-side' onclick='myFunction()'>Discuss global variables</p> <p id='back-side' onclick='myFunction_2()'>All global variables also become properties of the window object, so when a function is in the global context, you can access global variables using the window object, as well as its other properties. <br> Here, the showWidth() function is in global scope, and this.width refers to the width variable:<br><br> var width = 600;<br>var shape = (width: 300;}<br>var showWidth = function() { <br>document.write(this.width);<br>};<br>showWidth();</p>";

var method_this_object = "<p id='front-side' onclick='myFunction()'>Discuss the method of an object</p> <p id='back-side' onclick='myFunction_2()'>When a function is defined inside an object, it becomes a method. In a method, this refers to the containing object. <br> In the example below, the getArea() method appears inside the shape object, so this refers to the shape object it is contained in:<br><br>var shape = {<br>width: 600,<br>height: 400,<br>getArea: function() { <br> return this.width * this.height;<br>}<br>};<br> Because the this keyword here refers to the shape object, it would be the same as writing: <br><br> return shape.width * shape.height;<br><br> If you were creating several objects using an object constructor (and each shape had different dimensions), this would refer to the individual instance of the new object you are creating. When you called getArea(), it would calculate the dimensions of that particular instance of that object.</p>";

var function_expressions = "<p id='front-side' onclick='myFunction()'>Discuss function expression as method</p> <p id='back-side' onclick='myFunction_2()'>If a name function has been defined in a global scope, and it is then used as a method of an object, this refers to the object it is contained within. <br> The net example uses the same showWidth() function expression as the one on the left-hand page, but is it assigned as a method of an object. <br><br>var width = 600;<br>var shape = {width: 300};<br>var showWidth = function() { <br> document.write(this.width);<br>};<br>shape.getWidth = showWidth;<br>shape.getWidth();<br><br>The last but one line indicates that the showWidth() function is used as a method of the shape object. This method is given a different name: getWidth().<br>When the getWidth() method is called, even though is uses the showWidth() function, this now refers to the shape object, not the global context (and this.width refers to the width property of the shape object). So it writes the value of 300 to the page.</p>";






var myArray = [javascript_interactive, javascript_purpose, vocabulary_syntax, flowchart, what_is_a_script, javascript_objects, javascript_events, javascript_properties, javascript_methods, document_object, window_object, javascript_DOM, javascript_HTML_DOM, browser_interpreter, browser_web_page, html_content, css_presentation, javascript_behavior, javascript_separate, javascript_prop_acc, javascript_obj_prop, javascript_func_parameters, javascript_arg_vs_para, javascript_statements, javascript_code_block, javascript_comment, javascript_variable, javascript_identifier, javascript_keyword, javascript_naming_conventions, data_types, escaping, javascript_getelementbyid, how_to_declare_a_variable, javascript_array, numbering_array, accessing_array, number_items_in_array, javascript_expressions, statements_expressions, javascript_operator, javascript_operators_add, javascript_operators_sub, javascript_operators_multi, javascript_operators_div, javascript_operators_incre, javascript_operators_decre, javascript_operators_mod, javascript_textContent, string_operator, string_number, functions_methods_objects, javascript_functions, declaring_calling, single_function, multiple_function, javascript_expressions, function_expression, javascript_iife, anonymous_functions, local_variable, global_variable, variable_function, name_value_pairings, this_method, dot_bracket_notation, dot_notation, new_object, delete_object, constructor_notation, literal_notation, global_scope_functions, global_variables, method_this_object, function_expressions ];

var randomItem = myArray[Math.floor(Math.random()*myArray.length)];

document.getElementById("demo").innerHTML = randomItem;

function GetValue() {
	var randomItem = myArray[Math.floor(Math.random()*myArray.length)];
	document.getElementById("demo").innerHTML = randomItem;
}

function myFunction() {
    document.getElementById("back-side").style.display = "block ";
    document.getElementById("front-side").style.display = "none ";
}

function myFunction_2() {
    document.getElementById("back-side").style.display = "none ";
    document.getElementById("front-side").style.display = "block ";
}